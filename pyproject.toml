[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "treestamps"
version = "0.3.4"
description = "Create timestamp records for recursive operations on directory trees."
authors = ["AJ Slater <aj@slater.net>"]
license = "GPL-3.0-only"
readme = "README.md"
homepage = "https://github.com/ajslater/treestamps"
documentation = "https://github.com/ajslater/treestamps"
keywords = ["timestamps", "library", "recursive", "directory"]
classifiers = [
  "Environment :: Console",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3 :: Only",
  "Topic :: Software Development :: Libraries :: Python Modules",
]
packages = [{ include = "treestamps.py" }, { include = "tests", format = "sdist" }]
include = ["NEWS.md"]

[tool.poetry.dependencies]
python = "^3.9"
"ruamel.yaml" = "^0.17.21"
termcolor = "^2.0.1"

[tool.poetry.group.dev.dependencies]
black = "^23.3.0"
codespell = "^2.1.0"
coverage = { extras = ["toml"], version = "^7.0" }
neovim = "^0.3.1"
pyright = "^1.1.237"
pytest = "^7.0.0"
pytest-cov = "^4.0"
pytest-gitignore = "^1.3"
radon = { version = "^6.0.1", extras = ["toml"]}
ruff = "^0.0.260"
vulture = "^2.1"

[tool.poetry.urls]
"Source" = "https://github.com/ajslater/treestamps"
"Issues" = "https://github.com/ajslater/treestamps/issues"

[tool.black]
exclude = "/(.git|.mypy_cache|.pytest_cache|.venv|__pycache__|dist|node_modules|test-results|typings)/"

[tool.codespell]
skip=".git,.mypy_cache,.pytest_cache,.venv,*~,./dist,./node_modules,./package-lock.json,./poetry.lock,./test-results"
builtin="clear,rare,code"
check-hidden=true
ignore-words-list="thead"

[tool.coverage.run]
source = ["treestamps"]
branch = true
concurrency = ["multiprocessing"]
omit = [
  ".git/*",
  ".mypy_cache/*",
  ".pytest_cache/*",
  ".venv/*",
  "*__pycache__*",
  "dist/*",
  "node_modules/*",
  "test-results/*",
  "typings/*"
]

[tool.coverage.html]
directory = "test-results/coverage"

[tool.pytest.ini_options]
junit_family = "xunit2"
addopts = """
  --junitxml=test-results/pytest/junit.xml
  -ra
  --strict-markers
  --cov
  --cov-append
  --cov-report=html
  --cov-report=term
  --ignore=.git
  --ignore=.mypy_cache
  --ignore=.pytest_cache
  --ignore=.venv
  --ignore=dist
  --ignore=node_modules
  --ignore=test-results
  --ignore=typings
  --ignore=vulture_whitelist.py
  --ignore-glob=*__pycache__*
"""

[tool.pyright]
exclude = [
  "**/__pycache__",
  "**/node_modules",
  ".git",
  ".mypy_cache",
  ".pytest_cache",
  ".venv",
  "dist",
  "package-lock.json",
  "poetry.lock",
  "test-results",
  "typings",
  "vulture_whitelist.py"
]
useLibraryCodeForTypes = true
reportMissingImports = true
reportImportCycles = true

[tool.radon]
exclude = "*~,.git/*,.mypy_cache/*,.pytest_cache/*,.venv/*,__pycache__/*,dist/*,node_modules/*,test-results/*,typings/*"

[tool.ruff]
extend-exclude = ["cache", "typings"]
extend-ignore = ["S101", "D203", "D213"]
extend-select = ["B", "B9", "C", "D", "I", "N", "S", "W"]
# external = ["V101"]
# format = "grouped"
# show-source = true
target-version = "py39"
task-tags = ["TODO", "FIXME", "XXX", "http", "HACK"]

[tool.ruff.pycodestyle]
ignore-overlong-task-comments = true

[tool.vulture]
exclude = [".git/", ".mypy_cache/", ".pytest_cache", ".venv", "*__pycache__*"]
min_confidence = 61
sort_by_size = true
